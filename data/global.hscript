// a also funkin backend and menu imports
import funkin.backend.utils.WindowUtils;
import funkin.backend.system.framerate.Framerate;
import funkin.menus.BetaWarningState;
// openfl imports
import openfl.text.TextField;
import openfl.text.TextFormat;
import openfl.display.Sprite;

import hxvlc.util.Handle;

var redirectStates:Map<FlxState, String> = [
    TitleState => "Title",
    MainMenuState => "MainMenu",
    /*StoryMenuState => "StoryMode",
    FreeplayState => "Freeplay",*/
];

// week save data shit, etc.
public static var weekProgress:Map<String, {song:String, weekMisses:Int, weekScore:Int, deaths:Int}> = [];
public static var curMenuSelected:Int = 0;
public static var seenMenuCutscene:Bool = false;
public static var selectedSomethin:Bool = false;

// custom fps shit i borrowed from care & vechett
public static var framerateTextStuff:TextField;
public static var framerateSubText:TextField;
public static var textFormat:TextFormat;

function new() {
    // fps stuff, again thank you vechett & care
    textFormat = new TextFormat(Paths.getFontName(Paths.font('garf.ttf')), 15, FlxColor.WHITE);
    Main.instance.addChild(sprite = new Sprite()).graphics.beginFill(0x000000);
    sprite.graphics.drawRect(0, 0, 100, 100); sprite.graphics.endFill();
    sprite.alpha = 0.3; sprite.x = sprite.y = 15;
    Main.instance.addChild(framerateTextStuff = new TextField()).defaultTextFormat = textFormat;
    Main.instance.addChild(framerateSubText = new TextField()).defaultTextFormat = textFormat;

    // fps subtext stuff
    framerateSubText.text = "\nGOREFIELD V2 RE-CODE BUILD";
    framerateSubText.width = framerateSubText.textWidth + 10;
    framerateTextStuff.x = framerateTextStuff.y = framerateSubText.x = framerateSubText.y = 17;

    // debug stuff + window title
    WindowUtils.winTitle = "GARFIELD & FRIENDS";
    trace("Jon, I require Lasagna.");
}

function update() {
    framerateTextStuff.text = "FPS: " + Framerate.fpsCounter.fpsNum.text + " || MEM: " + Framerate.memoryCounter.memoryText.text + Framerate.memoryCounter.memoryPeakText.text;
    framerateTextStuff.width = framerateTextStuff.textWidth + 10;
    framerateTextStuff.height = framerateTextStuff.textHeight + 25;
    framerateSubText.width = framerateSubText.textWidth;
    setSize(framerateTextStuff.width, framerateTextStuff.height);
    
    if(FlxG.keys.justPressed.F5) FlxG.resetState();
}

function preStateSwitch() {
    Handle.init([]);
    Framerate.fpsCounter.fpsNum.visible = Framerate.fpsCounter.fpsLabel.visible = Framerate.memoryCounter.memoryText.visible = Framerate.memoryCounter.memoryPeakText.visible = Framerate.codenameBuildField.visible = false;

    for (redirectState in redirectStates.keys()) 
        if (Std.isOfType(FlxG.game._requestedState, redirectState)) 
            FlxG.game._requestedState = new ModState(redirectStates.get(redirectState));
}

function destroy() {
    Framerate.fpsCounter.fpsNum.visible = Framerate.fpsCounter.fpsLabel.visible = Framerate.memoryCounter.memoryText.visible = Framerate.memoryCounter.memoryPeakText.visible = Framerate.codenameBuildField.visible = true;
    Main.instance.removeChild(framerateTextStuff);
    Main.instance.removeChild(framerateSubText);
    Main.instance.removeChild(sprite);
}

function setSize(width, height) {
    sprite.graphics.clear();
    sprite.graphics.beginFill(0x000000);
    sprite.graphics.drawRect(0, 0, width, height);
    sprite.graphics.endFill();
}